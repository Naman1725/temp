def generate_smart_bar_charts(user_query: str, sql_query: str):
    """
    Generate professional, horizontally-scrollable bar charts based on user query and SQL,
    using schema, stats, and 200-row sample via LLM.
    """
    try:
        # Step 1: Get latest blob
        azure = AzureStorage()
        container = azure.client.get_container_client(AZURE_CONFIG["container"])
        blobs = sorted(
            container.list_blobs(name_starts_with=f"{AZURE_CONFIG['results_folder']}/"),
            key=lambda b: b.creation_time,
            reverse=True
        )
        if not blobs:
            print("‚ùå No blob found.")
            return []

        latest_blob = blobs[0]
        data_bytes = container.download_blob(latest_blob.name).readall()
        df = pd.read_csv(BytesIO(data_bytes))
        if df.empty:
            print("‚ö†Ô∏è Latest dataset is empty.")
            return []

        # Step 2: Prepare metadata
        schema = {
            col: {
                "dtype": str(df[col].dtype),
                "non_null_count": int(df[col].notna().sum()),
                "unique": int(df[col].nunique())
            }
            for col in df.columns
        }
        stats = df.describe(include='all').fillna("").to_dict()
        sample = df.sample(n=min(200, len(df)), random_state=42).to_markdown(index=False)

        # Step 3: Build prompt
        prompt = f"""
You are a data visualization expert. A user asked a question, and a SQL query was run.
Your job is to:
1. Understand the data using schema, stats, and a random sample.
2. Suggest ONE meaningful bar chart aligned with the user's goal.
3. Specify the best column for X axis (categorical), Y axis (numeric), and Z axis (optional).
4. Ensure it's clear, business-useful, and avoids messy axes (too many categories).

User Question: {user_query}
SQL Query: {sql_query}

Schema Summary:
{json.dumps(schema, indent=2)}

Statistical Summary:
{json.dumps(stats, indent=2)}

Random Sample (200 rows):
{sample}

Respond with only this JSON:
{{
  "chart": {{
    "x": "<column_name>",
    "y": "<numeric_column_name>",
    "z": "<optional_column>",
    "reason": "why this chart helps"
  }}
}}
"""

        # Step 4: Ask LLM
        ai = AIService()
        response = ai.client.chat.completions.create(
            model=OPENAI_CONFIG["deployment"],
            messages=[{"role": "user", "content": prompt}],
            temperature=0.4,
            max_tokens=700
        )

        raw = response.choices[0].message.content.strip()
        try:
            chart_json = json.loads(re.search(r"\{.*\}", raw, re.DOTALL).group(0))
        except Exception as e:
            print(f"‚ùå Failed to parse chart JSON: {e}")
            print(raw)
            return []

        ch = chart_json.get("chart", {})
        x = ch.get("x")
        y = ch.get("y")
        z = ch.get("z")
        reason = ch.get("reason", f"Bar chart of {y} by {x}")

        if not x or not y or x not in df.columns or y not in df.columns:
            print("‚ö†Ô∏è Invalid chart columns suggested.")
            return []

        # Step 5: Prepare grouped data for bar chart
        if df[x].nunique() > 50 or pd.api.types.is_numeric_dtype(df[x]):
            print("‚ö†Ô∏è Too many or invalid x-axis values for bar chart.")
            return []

        grouped = df.groupby(x)[y].sum().reset_index()
        grouped = grouped.sort_values(by=y, ascending=False).head(30)  # Clean view

        # Step 6: Plot
        fig = px.bar(grouped, x=x, y=y, title=reason)
        fig.update_layout(
            font=dict(size=10),
            height=500,
            width=max(100 * len(grouped), 1000),
            margin=dict(l=20, r=20, t=30, b=60),
            xaxis_tickangle=-45
        )
        fig.show()
        return [fig]

    except Exception as e:
        print(f"üî• Smart bar chart generation error: {e}")
        return []
