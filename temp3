def generate_charts_custom2(user_query: str, sql_query: str) -> list:
    """
    Improved chart generation:
      - Samples up to 100 rows (random if >100)
      - Includes describe() stats
      - Annotates column roles (date/numeric/categorical)
      - Prompts LLM for up to 5 charts
      - Filters out invalid combos (e.g., line on non-sequential x, pie with too many slices)
      - Falls back to histograms if nothing remains
      - Renders with a fixed size to trigger scrollbars and enables scrollZoom
      - Sorts and groups line charts, with visible markers
    """
    try:
        # fetch latest CSV from Azure
        azure = AzureStorage()
        container = azure.client.get_container_client(AZURE_CONFIG["container"])
        blobs = sorted(
            [b for b in container.list_blobs(name_starts_with=f"{AZURE_CONFIG['results_folder']}/")],
            key=lambda b: b.creation_time, reverse=True
        )
        if not blobs:
            print("‚ùå No data available for chart generation.")
            return []
        data_bytes = container.download_blob(blobs[0].name).readall()
        df = pd.read_csv(BytesIO(data_bytes))
        if df.empty:
            print("‚ö†Ô∏è The latest dataset is empty. No charts can be generated.")
            return []

        # sample & stats
        sample_df = df.sample(min(100, len(df)), random_state=42)
        sample_md = sample_df.to_markdown(index=False)
        stats_md = df.describe(include='all').to_markdown()

        # column roles
        col_roles = {
            col: ("date" if pd.api.types.is_datetime64_any_dtype(df[col])
                  else "numeric" if pd.api.types.is_numeric_dtype(df[col])
                  else "categorical")
            for col in df.columns
        }

        # build prompt
        prompt = f"""
You are a data analyst assistant. Suggest up to 5 charts in JSON:
{{
  "charts": [
    {{
      "type": "<bar|line|scatter|pie|treemap|heatmap>",
      "x": "<col_for_x>",
      "y": "<col_for_y>",
      "z": "<optional_col_for_z>",
      "reason": "<why useful>"
    }}
  ]
}}
Column roles: {json.dumps(col_roles, indent=2)}
Sample rows (up to 100):
{sample_md}

Statistics:
{stats_md}

User question: {user_query}
Generated SQL: {sql_query}
"""
        ai = AIService()
        resp = ai.client.chat.completions.create(
            model=OPENAI_CONFIG["deployment"],
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3,
            max_tokens=800
        )
        text = resp.choices[0].message.content.strip()

        # extract JSON
        try:
            match = re.search(r"\{.*\}", text, re.DOTALL)
            chart_json = json.loads(match.group(0)) if match else {}
        except Exception as e:
            print(f"‚ùå JSON parsing error: {e}")
            chart_json = {}

        charts = chart_json.get("charts", [])
        figs = []
        seen = set()

        def is_valid_numeric(col):
            return col in df.columns and pd.api.types.is_numeric_dtype(df[col])

        for ch in charts:
            ctype = ch.get("type")
            x, y, z = ch.get("x"), ch.get("y"), ch.get("z")
            # dedupe
            if (ctype, x, y) in seen:
                continue
            # basic validity
            if not x or not y or x not in df.columns or y not in df.columns:
                continue
            # pie slice guard
            if ctype == "pie" and df[x].nunique() > 10:
                continue
            # line-chart must be on date or numeric x
            if ctype == "line" and not (
                pd.api.types.is_datetime64_any_dtype(df[x]) or pd.api.types.is_numeric_dtype(df[x])
            ):
                continue
            # y must be numeric for these
            if ctype in ["bar", "line", "scatter", "heatmap", "treemap", "pie"] and not is_valid_numeric(y):
                continue

            seen.add((ctype, x, y))
            title = ch.get("reason", f"{ctype} of {y} vs {x}")

            try:
                if ctype == "bar":
                    figs.append(px.bar(df, x=x, y=y, title=title))

                elif ctype == "line":
                    # 1) Sort by x so the line goes in order
                    df_line = df.sort_values(by=x)
                    # 2) Try to pick a categorical column for grouping
                    color_col = next(
                        (col for col in df_line.columns
                         if col not in {x, y}
                            and ((pd.api.types.is_categorical_dtype(df_line[col])) or
                                 (df_line[col].dtype == object and df_line[col].nunique() <= 10))),
                        None
                    )
                    if color_col:
                        figs.append(
                            px.line(
                                df_line,
                                x=x,
                                y=y,
                                color=color_col,
                                markers=True,
                                title=f"{title} (grouped by {color_col})"
                            )
                        )
                    else:
                        figs.append(
                            px.line(
                                df_line,
                                x=x,
                                y=y,
                                markers=True,
                                title=title
                            )
                        )

                elif ctype == "scatter":
                    figs.append(px.scatter(df, x=x, y=y, title=title))

                elif ctype == "pie":
                    figs.append(px.pie(df, names=x, values=y, title=title))

                elif ctype == "treemap":
                    path = [p for p in [x, z] if p in df.columns]
                    figs.append(px.treemap(df, path=path, values=y, title=title))

                elif ctype == "heatmap":
                    figs.append(px.density_heatmap(
                        df, x=x, y=y, z=z if z in df.columns else None, title=title
                    ))

            except Exception as e:
                print(f"‚ö†Ô∏è Skipping {ctype} chart: {e}")

        # fallback histograms if nothing valid
        if not figs:
            numeric_cols = [c for c in df.columns if pd.api.types.is_numeric_dtype(df[c])]
            for col in numeric_cols[:3]:
                figs.append(px.histogram(df, x=col, title=f"Distribution of {col}"))

        # render with scrollbars and pan/zoom enabled
        final_figs = []
        for fig in figs:
            fig.update_layout(
                dragmode='pan',
                autosize=False,
                width=min(max(150 * len(df.columns), 800), 2000),
                height=600,
                margin=dict(l=20, r=20, t=30, b=20),
                xaxis=dict(fixedrange=False, rangeslider=dict(visible=True)),
                yaxis=dict(fixedrange=False)
            )
            fig.show(config={'scrollZoom': True, 'displayModeBar': True})
            final_figs.append(fig)

        return final_figs

    except Exception as e:
        print(f"üî• Chart generation error: {e}")
        return []
