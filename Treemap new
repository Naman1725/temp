def generate_treemap_clean_top10(user_query: str, sql_query: str):
    try:
        # Step 1: Load latest data
        azure = AzureStorage()
        container = azure.client.get_container_client(AZURE_CONFIG["container"])
        blobs = sorted(
            container.list_blobs(name_starts_with=f"{AZURE_CONFIG['results_folder']}/"),
            key=lambda b: b.creation_time,
            reverse=True
        )
        if not blobs:
            print("No data available.")
            return

        latest_blob = blobs[0]
        df = pd.read_csv(BytesIO(container.download_blob(latest_blob.name).readall()))
        if df.empty:
            print("Dataset is empty.")
            return

        # Step 2: Filter categorical columns and select only top one by frequency
        categorical_cols = [
            col for col in df.columns
            if df[col].dtype == "object" or df[col].dtype.name == "category"
        ]
        if not categorical_cols:
            print("No categorical columns found for treemap.")
            return

        # Step 3: Choose most frequent categorical column
        top_cat_col = max(categorical_cols, key=lambda col: df[col].nunique())
        cat_counts = df[top_cat_col].value_counts()

        # Step 4: Lump low-frequency values into "Other"
        top_categories = cat_counts.head(10).index.tolist()
        df[top_cat_col] = df[top_cat_col].apply(lambda x: x if x in top_categories else "Other")

        # Step 5: Select one numeric column
        numeric_cols = df.select_dtypes(include='number').columns.tolist()
        if not numeric_cols:
            print("No numeric column available for value sizing.")
            return
        value_col = numeric_cols[0]

        # Step 6: Group and summarize data
        grouped_df = df.groupby(top_cat_col, as_index=False)[value_col].sum()

        # Step 7: Plot treemap
        fig = px.treemap(
            grouped_df,
            path=[top_cat_col],
            values=value_col,
            title=f"Treemap: {value_col} by {top_cat_col} (Top 10 + Other)"
        )
        fig.show()

    except Exception as e:
        print(f"Error generating treemap: {e}")
        print("Not possible to generate clean treemap.")
