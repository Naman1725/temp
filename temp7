def GenerateBarChartsLLM(user_query: str, sql_query: str):
    """LLM-guided bar chart generation with data schema, random sampling, and fallback messaging"""
    try:
        # Load latest dataset
        azure = AzureStorage()
        container = azure.client.get_container_client(AZURE_CONFIG["container"])
        blobs = sorted(
            [b for b in container.list_blobs(name_starts_with=f"{AZURE_CONFIG['results_folder']}/")],
            key=lambda x: x.creation_time,
            reverse=True
        )
        if not blobs:
            print("‚ùå No data available.")
            return []

        latest_blob = blobs[0]
        data_bytes = container.download_blob(latest_blob.name).readall()
        df = pd.read_csv(BytesIO(data_bytes))

        if df.empty:
            print("‚ö†Ô∏è Dataset is empty.")
            return []

        # Schema summary
        schema = {
            col: {
                "dtype": str(df[col].dtype),
                "non_nulls": int(df[col].notna().sum()),
                "unique": int(df[col].nunique())
            }
            for col in df.columns
        }

        # Random sample of 100 rows
        sample_rows = df.sample(n=min(100, len(df)), random_state=42).to_markdown(index=False)

        # Prompt construction
        prompt = f"""
You are a smart data visualization assistant.
Your job is to suggest meaningful **bar charts only** based on:
1. The user's natural language question,
2. The SQL query generated from it,
3. The schema of the resulting data,
4. A sample of the data (random 100 rows).

Here is the context:
User Query: {user_query}
SQL Query: {sql_query}

Data Schema (structure of the result table):
{json.dumps(schema, indent=2)}

Random Sample Rows:
{sample_rows}

Suggest up to 2 relevant bar charts in this JSON format:
{{
  "charts": [
    {{
      "x": "<categorical_column>",
      "y": "<numeric_column>",
      "reason": "Why this bar chart reveals useful insight"
    }}
  ]
}}
"""

        ai = AIService()
        resp = ai.client.chat.completions.create(
            model=OPENAI_CONFIG['deployment'],
            messages=[{"role": "user", "content": prompt}],
            temperature=0.4,
            max_tokens=700
        )
        raw = resp.choices[0].message.content.strip()

        try:
            match = re.search(r"\{.*\}", raw, re.DOTALL)
            chart_json = json.loads(match.group(0)) if match else {}
        except:
            print("‚ö†Ô∏è Failed to parse LLM output.")
            print("The data does not contain any meaningful patterns suitable for bar chart visualization.")
            return []

        charts = chart_json.get("charts", [])
        if not charts:
            print("‚ö†Ô∏è LLM did not suggest any bar charts.")
            print("The data does not contain any meaningful patterns suitable for bar chart visualization.")
            return []

        # Plot charts
        figs = []
        for ch in charts[:2]:
            x = ch.get("x")
            y = ch.get("y")
            reason = ch.get("reason", f"{y} by {x}")

            if not x or not y or x not in df.columns or y not in df.columns:
                continue
            if not pd.api.types.is_numeric_dtype(df[y]):
                continue
            if pd.api.types.is_numeric_dtype(df[x]) or df[x].nunique() > 50:
                continue

            grouped = df.groupby(x)[y].sum().reset_index()
            grouped = grouped.sort_values(by=y, ascending=False).head(30)

            if grouped[y].max() == 0:
                continue

            fig = px.bar(grouped, x=x, y=y, title=reason)
            fig.update_layout(
                font=dict(size=10),
                width=max(100 * len(grouped), 800),
                height=500,
                margin=dict(l=10, r=10, t=30, b=40),
                xaxis_tickangle=-45
            )
            fig.show()
            figs.append(fig)

        if not figs:
            print("The data does not contain any meaningful patterns suitable for bar chart visualization.")
        return figs

    except Exception as e:
        print(f"üî• LLM bar chart generation error: {e}")
        print("The data does not contain any meaningful patterns suitable for bar chart visualization.")
        return []
